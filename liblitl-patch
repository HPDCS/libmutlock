diff --git a/Makefile b/Makefile
index badb0de..2781cf1 100644
--- a/Makefile
+++ b/Makefile
@@ -66,6 +66,8 @@ include/topology.h: include/topology.in
 	sed -i "s/@pagesize@/$$(getconf PAGESIZE)/g" $@
 	sed -i 's#@cpufreq@#'$$(cat /proc/cpuinfo | grep MHz | head -1 | awk '{ x = $$4/1000; printf("%0.2g", x); }')'#g' $@
 	chmod a+x $@
+	sed -i 's/NUMA/1/g' include/topology.h
+	sed -i 's/1_/NUMA_/g' include/topology.h
 
 
 clean:
diff --git a/Makefile.config b/Makefile.config
index fb4c970..47e1f3c 100644
--- a/Makefile.config
+++ b/Makefile.config
@@ -31,4 +31,8 @@ cbomcs_spin_then_park 		 \
 cptltkt_original 			 \
 ctkttkt_original 			 \
 partitioned_original         \
-mutexee_original
+mutexee_original			 \
+semtcpmutlock_original		 \
+semtcpfifomutlock_original	 \
+semtcptsmutlock_original	 \
+semtcptsfifomutlock_original	 
diff --git a/src/interpose.c b/src/interpose.c
index 1e65e77..4c79b4d 100644
--- a/src/interpose.c
+++ b/src/interpose.c
@@ -87,6 +87,14 @@
 #include <partitioned.h>
 #elif defined(MUTEXEE)
 #include <mutexee.h>
+#elif defined(SEMTCPMUTLOCK)
+#include <semtcpmutlock.h>
+#elif defined(SEMTCPFIFOMUTLOCK)
+#include <semtcpfifomutlock.h>
+#elif defined(SEMTCPTSMUTLOCK)
+#include <semtcptsmutlock.h>
+#elif defined(SEMTCPTSFIFOMUTLOCK)
+#include <semtcptsfifomutlock.h>
 #else
 #error "No lock algorithm known"
 #endif
@@ -456,6 +464,8 @@ int pthread_mutex_lock(pthread_mutex_t *mutex) {
 int pthread_mutex_timedlock(pthread_mutex_t *mutex,
                             const struct timespec *abstime) {
     assert(0 && "Timed locks not supported");
+    exit(1);
+    return 0;
 }
 
 int pthread_mutex_trylock(pthread_mutex_t *mutex) {
@@ -660,11 +670,15 @@ int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock) {
 int pthread_rwlock_timedrdlock(pthread_rwlock_t *lcok,
                             const struct timespec *abstime) {
     assert(0 && "Timed locks not supported");
+    exit(1);
+    return 0;
 }
 
 int pthread_rwlock_timedwrlock(pthread_rwlock_t *lock,
                             const struct timespec *abstime) {
     assert(0 && "Timed locks not supported");
+    exit(1);
+    return 0;
 }
 
 
diff --git a/src/mcs.c b/src/mcs.c
index 67f16ae..574c646 100644
--- a/src/mcs.c
+++ b/src/mcs.c
@@ -110,7 +110,8 @@ int mcs_mutex_lock(mcs_mutex_t *impl, mcs_node_t *me) {
 #if COND_VAR
     if (ret == 0) {
         DEBUG_PTHREAD("[%d] Lock posix=%p\n", cur_thread_id, &impl->posix_lock);
-        assert(REAL(pthread_mutex_lock)(&impl->posix_lock) == 0);
+        REAL(pthread_mutex_unlock)(&impl->posix_lock);
+        //assert(REAL(pthread_mutex_lock)(&impl->posix_lock) == 0);
     }
 #endif
     DEBUG("[%d] Lock acquired posix=%p\n", cur_thread_id, &impl->posix_lock);
@@ -169,7 +170,9 @@ static void __mcs_mutex_unlock(mcs_mutex_t *impl, mcs_node_t *me) {
 void mcs_mutex_unlock(mcs_mutex_t *impl, mcs_node_t *me) {
 #if COND_VAR
     DEBUG_PTHREAD("[%d] Unlock posix=%p\n", cur_thread_id, &impl->posix_lock);
-    assert(REAL(pthread_mutex_unlock)(&impl->posix_lock) == 0);
+    //assert(REAL(pthread_mutex_unlock)(&impl->posix_lock)    == 0);
+    REAL(pthread_mutex_unlock)(&impl->posix_lock);
+
 #endif
     __mcs_mutex_unlock(impl, me);
 }
